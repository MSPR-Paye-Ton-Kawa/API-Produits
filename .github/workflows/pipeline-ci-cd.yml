name: .NET Core CI

on:
  push:
    branches:
      - main
      - dev
      - 'feature-*'
      - 'release-*'
      - 'hotfix-*'
      - 'bugfix-*'
  pull_request:
    branches:
      - main
      - dev
      - 'feature-*'
      - 'release-*'
      - 'hotfix-*'
      - 'bugfix-*' 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x' 


      - name: Build Docker image
        run: |
          docker build -t api_produits:latest ./API_Produits/API_Produits
          docker images


      - name: Test
        run: |
          #Run tests within the Docker container
          docker run api_produits dotnet test --no-restore --verbosity normal
     
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Publish Docker image
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker tag api_produits "${{ secrets.DOCKERHUB_USERNAME }}/api_produits:latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/api_produits:latest"


      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey="MSPR-Paye-Ton-Kawa_API-Produits"
            -Dsonar.organization="mspr-paye-ton-kawa"
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources="./API_Produits/API_Produits"
       

      - name: Deploy to staging
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: |
          # Example deployment step to staging environment
          echo "Deploying Docker image to staging environment:"
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}/my-docker-image:latest"
          docker stop staging-container || true
          docker rm staging-container || true
          docker run -d --name staging-container -p 8081:80 "${{ secrets.DOCKERHUB_USERNAME }}/my-docker-image:latest"
          echo "Application deployed to http://localhost:8081"

      - name: Deploy to production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Example deployment step to production environment
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}/my-docker-image:latest"
          docker stop production-container || true
          docker rm production-container || true
          docker run -d --name production-container -p 8080:80 "${{ secrets.DOCKERHUB_USERNAME }}/my-docker-image:latest"
          echo "Application deployed to http://localhost:8080"
