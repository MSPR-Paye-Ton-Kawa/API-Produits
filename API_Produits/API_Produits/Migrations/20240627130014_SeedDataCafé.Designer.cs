// <auto-generated />
using System;
using API_Produits.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Produits.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240627130014_SeedDataCafé")]
    partial class SeedDataCafé
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("API_Produits.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Café Noir",
                            CategoryType = "Moulu"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Café Vert",
                            CategoryType = "Grain"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Café Bleu",
                            CategoryType = "Décafeiné"
                        });
                });

            modelBuilder.Entity("API_Produits.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998),
                            Description = "Café noir à la saveur intense.",
                            Name = "Café Noir Intense",
                            Price = 3.50m,
                            StockQuantity = 150,
                            SupplierId = 1,
                            UpdatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998)
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998),
                            Description = "Café vert au goût doux et subtil.",
                            Name = "Café Vert Doux",
                            Price = 4.00m,
                            StockQuantity = 200,
                            SupplierId = 2,
                            UpdatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998)
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998),
                            Description = "Café bleu avec des notes fruitées.",
                            Name = "Café Bleu Fruité",
                            Price = 4.50m,
                            StockQuantity = 100,
                            SupplierId = 1,
                            UpdatedAt = new DateTime(2024, 6, 27, 13, 0, 14, 689, DateTimeKind.Utc).AddTicks(1998)
                        });
                });

            modelBuilder.Entity("API_Produits.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            ContactEmail = "contactA@example.com",
                            SupplierName = "Fournisseur de Café A"
                        },
                        new
                        {
                            SupplierId = 2,
                            ContactEmail = "contactB@example.com",
                            SupplierName = "Fournisseur de Café B"
                        });
                });

            modelBuilder.Entity("API_Produits.Models.Product", b =>
                {
                    b.HasOne("API_Produits.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Produits.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
